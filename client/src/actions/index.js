import axios from 'axios';
import * as types from './types';

// Fetch User action creator returns a function 
// Redux thunk will inspect the value returned by this AC
// If we return a function, Reduc Thunk will call the function
// And pass in dispatch as an argument 
export const fetchUser = () => async dispatch => {   
    const res = await axios.get('/api/current_user');
    dispatch({ type: types.FETCH_USER, payload: res.data }); 
};

export const submitSurvey = (values, history) => async dispatch => {
    const res = await axios.post('/api/surveys', values);
    // We pass the history object to the action creator using the onClick callback
    // In the component to access react router for redirection after survey creation
    history.push('/');
    dispatch({ type: types.SUBMIT_SURVEY, payload: res.data });
};

export const fetchSurveys = () => async dispatch => { 
    const res = await axios.get('/api/surveys');
    // Payload == data in the response generated by the endpoint
    dispatch({ type: types.FETCH_SURVEYS, payload: res.data })
};

export const submitProfile = (values, history) => async dispatch => {
    const res = await axios.post('/api/profile', values);
    history.push('/');
    dispatch({ type: types.SUBMIT_PROFILE, payload: res.data });
}

export const fetchProfile = () => async dispatch => {
    const res = await axios.get('/api/profile');
    dispatch({ type: types.FETCH_PROFILE, payload: res.data });
}

export const submitInflow = (values, history) => async dispatch => {
    const res = await axios.post('/api/inflow', values);
    dispatch({ type: types.SUBMIT_INFLOW, payload: res.data });
}

export const fetchInflows = () => async dispatch => {
    const res = await axios.get('/api/inflows');
    dispatch({ type: types.FETCH_INFLOWS, payload: res.data })
}

export const deleteInflow = (inflow) => async dispatch => {
    const res = await axios.post('/api/inflow/delete', {
        inflow_id: inflow._id});
    dispatch({ type: types.DELETE_INFLOW, payload: inflow })
}

export const submitOutflow = (values, history) =>  async dispatch => {
    const res = await axios.post('/api/outflow', values);
    dispatch({ type: types.SUBMIT_OUTFLOW, payload: res.data });
}
export const fetchOutflows = () => async dispatch => {
    const res = await axios.get('/api/outflows');
    dispatch({ type: types.FETCH_OUTFLOWS, payload: res.data});
}

export const deleteOutflow = (outflow) => async dispatch => {
    const res = await axios.post('/api/outflow/delete', {
        outflow_id: outflow._id});
    dispatch({ type: types.DELETE_OUTFLOW, payload: outflow })
}
